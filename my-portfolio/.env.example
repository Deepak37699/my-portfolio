# FastAPI Portfolio Web Application Development Plan

This document outlines the phases and key steps involved in developing a personal portfolio web application using the FastAPI framework with JSON file storage.

## 1. Planning and Setup (Week 1)

*   **Objective:** Define the scope, requirements, and initial project structure.
*   **Key Steps:**
    *   **Requirement Gathering:** Identify core sections (About, Projects, Skills, Contact) and content. Determine design preferences and user experience goals. Assess the need for dynamic features (blog, admin panel).
    *   **Frontend Strategy Selection:**
        *   **Option A (Server-Side Rendering):** FastAPI with a templating engine (e.g., Jinja2). Suitable for simpler, content-focused portfolios.
        *   **Option B (API Only):** FastAPI as a backend API consumed by a separate frontend framework (React, Vue, Svelte, etc.). Provides more flexibility for complex interactions but requires more setup.
    *   **Project Initialization:**
        *   Create project directory with `app/`, `static/`, `templates/`, and `data/` folders.
        *   Set up a Python virtual environment.
        *   Install core dependencies: `fastapi`, `uvicorn[standard]`, `jinja2` (if using Option A).

## 2. Core Backend Development (Week 2-3)

*   **Objective:** Build the foundation of the application using FastAPI, handling routing, data, and basic logic.
*   **Key Steps:**
    *   **Application Structure:** Create the main FastAPI application file (`main.py`). Configure static file serving and template directories (if applicable).
    *   **Data Modeling:** Define data structures for portfolio content (e.g., `Project`, `Skill`) using Pydantic models.
    *   **Route Implementation:** Create API endpoints or server-side routes for each section (`/`, `/about`, `/projects`, `/skills`, `/contact`). Implement a POST endpoint for handling contact form submissions.
    *   **Business Logic:** Load or manage portfolio data from JSON files. Implement logic for processing contact form data (e.g., sending emails).

## 3. JSON File Storage Implementation (Week 3)

*   **Objective:** Set up a file-based data storage system using JSON.
*   **Key Steps:**
    *   **JSON Structure Design:**
        *   Create JSON schema for each data type (`projects.json`, `skills.json`, `about.json`, `messages.json`)
        *   Design a logical structure that enables easy querying and updates
    *   **File Utility Services:**
        *   Create utility functions for reading/writing JSON files (`json_utils.py`)
        *   Implement CRUD operations for each data type
        *   Add error handling and data validation
    *   **Data Manager Class:**
        *   Build a reusable data manager class to handle file operations
        *   Implement caching to minimize file I/O operations
        *   Add locking mechanisms to prevent concurrent write conflicts
    *   **Initial Data Setup:**
        *   Create starter JSON files with sample data
        *   Add a script to reset data to defaults if needed

## 4. Frontend Development (Week 4-5)

*   **Objective:** Develop the user interface based on the chosen frontend strategy.
*   **Key Steps:**
    *   **If Server-Side Rendering (Jinja2):**
        *   Create HTML templates for each page, using Jinja2 syntax to display dynamic data.
        *   Develop CSS for styling.
        *   Add necessary client-side JavaScript for interactivity.
    *   **If API Only (Separate Frontend):**
        *   Set up the frontend project using the chosen framework/library.
        *   Develop UI components for each section.
        *   Implement data fetching from the FastAPI backend API using `fetch` or libraries like `axios`.
        *   Configure client-side routing.

## 5. Authentication & Admin Interface (Week 6)

*   **Objective:** Create a secure admin interface for content management.
*   **Key Steps:**
    *   **User Authentication Setup:** 
        *   Create a `users.json` file to store admin credentials (hashed passwords)
        *   Implement JWT or session-based authentication
        *   Configure password hashing with Bcrypt or Argon2
        *   Set up login/logout endpoints
    *   **Admin Dashboard:**
        *   Create protected admin routes with authentication middleware
        *   Build interfaces for managing content (add/edit/delete projects, skills, etc.)
        *   Implement JSON file update operations from the admin interface
    *   **Security Measures:**
        *   Ensure proper password hashing
        *   Implement rate limiting for login attempts
        *   Add CSRF protection for form submissions
        *   Add role-based access controls if needed

## 6. Testing (Week 7)

*   **Objective:** Ensure the application functions correctly and reliably.
*   **Key Steps:**
    *   **Backend Testing:** 
        *   Test JSON file operations and data validation
        *   Write unit and integration tests for FastAPI endpoints using `pytest` and `httpx`
        *   Test authentication and admin functionality
        *   Verify proper password hashing and storage
    *   **Frontend Testing:** 
        *   If using a separate frontend, write component and integration tests
        *   Test UI interactions and responsiveness
        *   Verify form validations

## 7. Deployment (Week 8)

*   **Objective:** Make the application accessible online.
*   **Key Steps:**
    *   **Production Setup:** Configure a production-ready server (Gunicorn/Hypercorn with Uvicorn workers). Manage sensitive configuration using environment variables.
    *   **JSON File Management:** Ensure proper file permissions and backup strategy.
    *   **Platform Selection:** Choose a hosting provider (e.g., Heroku, Render, VPS, Netlify/Vercel for static frontend).
    *   **CI/CD (Optional):** Set up automated testing and deployment pipelines (e.g., GitHub Actions).

## 8. Refinement and Iteration (Ongoing)

*   **Objective:** Improve the application based on feedback and add features.
*   **Key Steps:**
    *   Gather user feedback.
    *   Implement requested features or improvements.
    *   Optimize performance and address any issues.
    *   Monitor file storage performance and consider migration to database if needed.

## JSON File Structure Examples

{
  "DATABASE_URL": "sqlite:///./test.db",
  "SECRET_KEY": "your_secret_key_here",
  "DEBUG": "True",
  "ADMIN_USERNAME": "admin",
  "ADMIN_PASSWORD": "password"
}